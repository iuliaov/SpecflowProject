// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecflowProject.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Retro Notes")]
    public partial class RetroNotesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "78400.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Retro Notes", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check notes button functionality")]
        [NUnit.Framework.CategoryAttribute("tc:79551")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("sendButton")]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", null)]
        public void CheckNotesButtonFunctionality(string user_Email, string user_Password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79551",
                    "retro",
                    "notes",
                    "sendButton"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email", user_Email);
            argumentsOfScenario.Add("user_password", user_Password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check notes button functionality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
        testRunner.Given(string.Format("the user is logged with {0} and {1}", user_Email, user_Password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
        testRunner.And("the user is on \"http://localhost:3000/project/1/retro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
        testRunner.When("the user joins an active meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
        testRunner.And("the user clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
        testRunner.Then("the notes window is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check send notes button functionality")]
        [NUnit.Framework.CategoryAttribute("tc:79552")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("sendButton")]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "a", "enabled", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "a", "enabled", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "a", "enabled", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "", "disabled", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "", "disabled", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "", "disabled", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "Лорем ипсум", "disabled", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "Лорем ипсум", "disabled", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "Лорем ипсум", "disabled", null)]
        public void CheckSendNotesButtonFunctionality(string user_Email, string user_Password, string input, string send_Button_State, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79552",
                    "retro",
                    "notes",
                    "sendButton"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email", user_Email);
            argumentsOfScenario.Add("user_password", user_Password);
            argumentsOfScenario.Add("input", input);
            argumentsOfScenario.Add("send_button_state", send_Button_State);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check send notes button functionality", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
        testRunner.Given(string.Format("the user is logged with {0} and {1}", user_Email, user_Password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
        testRunner.And("the user is on \"http://localhost:3000/project/1/retro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
        testRunner.When("the user joins an active meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
        testRunner.And("the user clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
        testRunner.And(string.Format("the user writes {0} in the notes input field", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
        testRunner.Then(string.Format("the send button is {0}", send_Button_State), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if manager, admin and staff users can write notes in an active retro meetin" +
            "g")]
        [NUnit.Framework.CategoryAttribute("tc:79553")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "a", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "a", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "a", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "#$%^&*()_-+=/?.,<>;:\"\'{}[]~`|", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "#$%^&*()_-+=/?.,<>;:\"\'{}[]~`|", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "#$%^&*()_-+=/?.,<>;:\"\'{}[]~`|", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "A sentence is the basic unit of language which expresses a complete thought.", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "A sentence is the basic unit of language which expresses a complete thought.", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "A sentence is the basic unit of language which expresses a complete thought.", null)]
        public void CheckIfManagerAdminAndStaffUsersCanWriteNotesInAnActiveRetroMeeting(string user_Email, string user_Password, string input, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79553",
                    "retro",
                    "notes",
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email", user_Email);
            argumentsOfScenario.Add("user_password", user_Password);
            argumentsOfScenario.Add("input", input);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if manager, admin and staff users can write notes in an active retro meetin" +
                    "g", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
        testRunner.Given(string.Format("the user is logged with {0} and {1}", user_Email, user_Password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 41
        testRunner.And("the user is on \"http://localhost:3000/project/1/retro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
        testRunner.When("the user joins an active meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
        testRunner.And("the user clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
        testRunner.And(string.Format("the user writes {0} in the notes input field", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
        testRunner.And("clicks the send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 46
        testRunner.Then("the message is displayed in the notes section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
        testRunner.And("the time of sending matches the current time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if manager, admin and staff users can write 700 chars notes in an active re" +
            "tro meeting")]
        [NUnit.Framework.CategoryAttribute("tc:79554")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", null)]
        public void CheckIfManagerAdminAndStaffUsersCanWrite700CharsNotesInAnActiveRetroMeeting(string user_Email, string user_Password, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79554",
                    "retro",
                    "notes",
                    "positive"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email", user_Email);
            argumentsOfScenario.Add("user_password", user_Password);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if manager, admin and staff users can write 700 chars notes in an active re" +
                    "tro meeting", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
        testRunner.Given(string.Format("the user is logged with {0} and {1}", user_Email, user_Password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 64
        testRunner.And("the user is on \"http://localhost:3000/project/1/retro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
        testRunner.When("the user joins an active meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
        testRunner.And("the user clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
        testRunner.And(@"the user writes ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi in pharetra tortor. Sed suscipit justo metus, finibus mattis sem suscipit sit amet. Nam porta, ipsum et ornare ullamcorper, erat elit maximus arcu, et fermentum elit nulla vel sem. Ut condimentum mattis erat id commodo. Curabitur tincidunt at orci non porttitor. Mauris dignissim rhoncus augue in pretium. In volutpat sit amet dolor in hendrerit. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec vel eleifend dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Praesent in justo ut massa rutrum sodales sit amet id enim. Phasellus lacinia tellus."" in the notes input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
        testRunner.And("clicks the send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 69
        testRunner.Then("the message is displayed in the notes section", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
        testRunner.And("the time of sending matches the current time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if manager, admin and staff users can write notes in an active stand-up mee" +
            "ting - negative")]
        [NUnit.Framework.CategoryAttribute("tc:79555")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("negative")]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "\"  \"", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "\"  \"", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "\"  \"", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "Лорем ипсум", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "Лорем ипсум", null)]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "Лорем ипсум", null)]
        public void CheckIfManagerAdminAndStaffUsersCanWriteNotesInAnActiveStand_UpMeeting_Negative(string user_Email, string user_Password, string input, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79555",
                    "retro",
                    "notes",
                    "negative"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email", user_Email);
            argumentsOfScenario.Add("user_password", user_Password);
            argumentsOfScenario.Add("input", input);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if manager, admin and staff users can write notes in an active stand-up mee" +
                    "ting - negative", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
        testRunner.Given(string.Format("the user is logged with {0} and {1}", user_Email, user_Password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
        testRunner.And("the user is on \"http://localhost:3000/project/1/retro\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
        testRunner.When("the user joins an active meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
        testRunner.And("the user clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
        testRunner.And(string.Format("the user writes {0} in the notes input field", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
        testRunner.Then("the user can\'t send the message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if messages in retro meeting are synchronised")]
        [NUnit.Framework.CategoryAttribute("tc:79556")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.CategoryAttribute("sync")]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        public void CheckIfMessagesInRetroMeetingAreSynchronised(string user_Email1, string user_Password1, string user_Email2, string user_Password2, string user_Email3, string user_Password3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79556",
                    "retro",
                    "notes",
                    "positive",
                    "sync"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email1", user_Email1);
            argumentsOfScenario.Add("user_password1", user_Password1);
            argumentsOfScenario.Add("user_email2", user_Email2);
            argumentsOfScenario.Add("user_password2", user_Password2);
            argumentsOfScenario.Add("user_email3", user_Email3);
            argumentsOfScenario.Add("user_password3", user_Password3);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if messages in retro meeting are synchronised", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 101
        testRunner.Given(string.Format("User 1 is logged in with {0} and {1}", user_Email1, user_Password1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 102
        testRunner.And(string.Format("User 2 is logged in with {0} and {1}", user_Email2, user_Password2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
        testRunner.And(string.Format("User 3 is logged in with {0} and {1}", user_Email3, user_Password3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
        testRunner.And("User 1, User 2 and User 3 join the same active retro meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
        testRunner.When("User 1 clicks on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
        testRunner.And("User 1 inserts \"Lorem ipsum\" in the notes input field", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
        testRunner.And("User 1 clicks the send button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
        testRunner.Then("The message is displayed in the notes section for User 2 and User 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
        testRunner.And("The name of the author matches User\'s 1 name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if users recieve notifications when notes window is opened")]
        [NUnit.Framework.CategoryAttribute("tc:79557")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.CategoryAttribute("sync")]
        [NUnit.Framework.CategoryAttribute("notification")]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        public void CheckIfUsersRecieveNotificationsWhenNotesWindowIsOpened(string user_Email1, string user_Password1, string user_Email2, string user_Password2, string user_Email3, string user_Password3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79557",
                    "retro",
                    "notes",
                    "positive",
                    "sync",
                    "notification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email1", user_Email1);
            argumentsOfScenario.Add("user_password1", user_Password1);
            argumentsOfScenario.Add("user_email2", user_Email2);
            argumentsOfScenario.Add("user_password2", user_Password2);
            argumentsOfScenario.Add("user_email3", user_Email3);
            argumentsOfScenario.Add("user_password3", user_Password3);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if users recieve notifications when notes window is opened", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 119
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
        testRunner.Given(string.Format("User 1 is logged in with {0} and {1}", user_Email1, user_Password1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 121
        testRunner.And(string.Format("User 2 is logged in with {0} and {1}", user_Email2, user_Password2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 122
        testRunner.And(string.Format("User 3 is logged in with {0} and {1}", user_Email3, user_Password3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
        testRunner.And("User 1, User 2 and User 3 join the same active retro meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
        testRunner.And("User 2 and User 3 clicked on the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 125
        testRunner.When(@"User 1 sends in notes ""Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi in pharetra tortor. Sed suscipit justo metus, finibus mattis sem suscipit sit amet. Nam porta, ipsum et ornare ullamcorper, erat elit maximus arcu, et fermentum elit nulla vel sem. Ut condimentum mattis erat id commodo."" twice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 126
        testRunner.Then("The messages are displayed in the notes section for User 2 and User 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
        testRunner.And("User 2 and User 3 recieve a new message notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if users recieve notifications when notes window is closed")]
        [NUnit.Framework.CategoryAttribute("tc:79558")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.CategoryAttribute("sync")]
        [NUnit.Framework.CategoryAttribute("notification")]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        public void CheckIfUsersRecieveNotificationsWhenNotesWindowIsClosed(string user_Email1, string user_Password1, string user_Email2, string user_Password2, string user_Email3, string user_Password3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79558",
                    "retro",
                    "notes",
                    "positive",
                    "sync",
                    "notification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email1", user_Email1);
            argumentsOfScenario.Add("user_password1", user_Password1);
            argumentsOfScenario.Add("user_email2", user_Email2);
            argumentsOfScenario.Add("user_password2", user_Password2);
            argumentsOfScenario.Add("user_email3", user_Email3);
            argumentsOfScenario.Add("user_password3", user_Password3);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if users recieve notifications when notes window is closed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 137
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 138
        testRunner.Given(string.Format("User 1 is logged in with {0} and {1}", user_Email1, user_Password1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 139
        testRunner.And(string.Format("User 2 is logged in with {0} and {1}", user_Email2, user_Password2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
        testRunner.And(string.Format("User 3 is logged in with {0} and {1}", user_Email3, user_Password3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
        testRunner.And("User 1, User 2 and User 3 join the same active retro meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
        testRunner.When("User 1 sends in notes \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
        testRunner.Then("User 2 and User 3 recieve a new message notification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
        testRunner.And("The message is displayed after clicking the notes button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check if notes are present upon switching the retro template")]
        [NUnit.Framework.CategoryAttribute("tc:79559")]
        [NUnit.Framework.CategoryAttribute("retro")]
        [NUnit.Framework.CategoryAttribute("notes")]
        [NUnit.Framework.CategoryAttribute("positive")]
        [NUnit.Framework.CategoryAttribute("sync")]
        [NUnit.Framework.CategoryAttribute("notification")]
        [NUnit.Framework.TestCaseAttribute("admin@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("manager@amdaris.com", "amdaris", "staff@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        [NUnit.Framework.TestCaseAttribute("staff@amdaris.com", "amdaris", "manager@amdaris.com", "amdaris", "admin@amdaris.com", "amdaris", null)]
        public void CheckIfNotesArePresentUponSwitchingTheRetroTemplate(string user_Email1, string user_Password1, string user_Email2, string user_Password2, string user_Email3, string user_Password3, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "tc:79559",
                    "retro",
                    "notes",
                    "positive",
                    "sync",
                    "notification"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("user_email1", user_Email1);
            argumentsOfScenario.Add("user_password1", user_Password1);
            argumentsOfScenario.Add("user_email2", user_Email2);
            argumentsOfScenario.Add("user_password2", user_Password2);
            argumentsOfScenario.Add("user_email3", user_Email3);
            argumentsOfScenario.Add("user_password3", user_Password3);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check if notes are present upon switching the retro template", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 154
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
        testRunner.Given(string.Format("User 1 is logged in with {0} and {1}", user_Email1, user_Password1), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
        testRunner.And(string.Format("User 2 is logged in with {0} and {1}", user_Email2, user_Password2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 157
        testRunner.And(string.Format("User 3 is logged in with {0} and {1}", user_Email3, user_Password3), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 158
        testRunner.And("User 1, User 2 and User 3 join the same active stand-up meeting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 159
        testRunner.When("User 1 sends in notes \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 160
        testRunner.And("Manager user moves to the next retro template", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
        testRunner.Then("the note is present in the current retro template for all users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
